"""
Django settings for full_auth project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import sys
import dj_database_url
from os import getenv, path
from pathlib import Path
from django.core.management.utils import get_random_secret_key
import dotenv

BASE_DIR = Path(__file__).resolve().parent.parent
dotenv_file = BASE_DIR / '.env.local'

if path.isfile(dotenv_file):
    dotenv.load_dotenv(dotenv_file)

DEVELOPMENT_MODE = getenv('DEVELOPMENT_MODE', 'False') == 'True'
DEBUG = getenv('DEBUG', 'False') == 'True'
SECRET_KEY = getenv('DJANGO_SECRET_KEY', get_random_secret_key())

# Security settings: Only enable in production (when DEVELOPMENT_MODE is False)
# SECURE_SSL_REDIRECT = not DEVELOPMENT_MODE  # Redirect HTTP to HTTPS only in production
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https') if not DEVELOPMENT_MODE else None
CSRF_COOKIE_SECURE = not DEVELOPMENT_MODE  # CSRF cookie secure only in production
SESSION_COOKIE_SECURE = not DEVELOPMENT_MODE  # Session cookies secure only in production


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'django_extensions',
    'rest_framework',
    'djoser',
    'storages',
    'social_django',
    'users',
    'samples',
    'dashboard',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'full_auth.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'full_auth.wsgi.application'


if DEVELOPMENT_MODE:
    # Use SQLite for development
    DATABASES = {
        'default': {
            'ENGINE': getenv('DB_ENGINE_SQLITE', 'django.db.backends.sqlite3'),
            'NAME': getenv('DB_NAME_SQLITE', path.join(path.dirname(__file__), 'db.sqlite3')),
        }
    }
else:
    # Use PostgreSQL for production
    DATABASES = {
        'default': {
            'ENGINE': getenv('DB_ENGINE_POSTGRES', 'django.db.backends.postgresql'),
            'NAME': getenv('DB_NAME_POSTGRES', 'API_data'),
            'USER': getenv('DB_USER_POSTGRES', 'Django_Server'),
            'PASSWORD': getenv('DB_PASSWORD_POSTGRES', 'Django_PW'),
            'HOST': getenv('DB_HOST_POSTGRES', 'localhost'),
            'PORT': getenv('DB_PORT_POSTGRES', '5432'),
        }
    }

DOMAIN = getenv('DOMAIN')
SITE_NAME = 'NQSL'


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


if DEVELOPMENT_MODE:
    # Development settings
    STATIC_URL = getenv('STATIC_URL_DEV', '/static/')
    STATIC_ROOT = path.join(BASE_DIR, getenv('STATIC_ROOT_DEV', 'static'))
else:
    # Production settings
    STATIC_URL = getenv('STATIC_URL_PROD', 'https://132.207.45.244/static/')
    STATIC_ROOT = getenv('STATIC_ROOT_PROD', 'C:/Users/Administrator/static/')

# Media settings (same for both environments)
MEDIA_URL = getenv('MEDIA_URL', '/media/')
MEDIA_ROOT = path.join(BASE_DIR, getenv('MEDIA_ROOT', 'media'))


AUTHENTICATION_BACKENDS = [
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.facebook.FacebookOAuth2',
    'django.contrib.auth.backends.ModelBackend',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'users.authentication.CustomJWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

DJOSER = {
    'PASSWORD_RESET_CONFIRM_URL': 'password-reset/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': True,
    'ACTIVATION_URL': 'activation/{uid}/{token}',
    'USER_CREATE_PASSWORD_RETYPE': True,
    'PASSWORD_RESET_CONFIRM_RETYPE': True,
    'TOKEN_MODEL': None,
    'SOCIAL_AUTH_ALLOWED_REDIRECT_URIS': getenv('REDIRECT_URLS').split(',')
}

AUTH_COOKIE = 'access'
AUTH_COOKIE_MAX_AGE = 60 * 60 * 24
AUTH_COOKIE_SECURE = getenv('AUTH_COOKIE_SECURE', 'True') == 'True'
AUTH_COOKIE_HTTP_ONLY = True
AUTH_COOKIE_PATH = '/'
AUTH_COOKIE_SAMESITE = 'None'

ALLOWED_HOSTS = getenv("ALLOWED_HOSTS", "127.0.0.1,localhost,132.207.X.X").split(",")

# CORS allowed origin regex (allows 132.207.X.X and localhost with or without ports)
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https?://132\.207\.\d+\.\d+(:\d+)?$",  # Allows 132.207.X.X with HTTP/HTTPS and optional port
    r"^https?://localhost(:\d+)?$",  # Allows localhost with HTTP/HTTPS and optional port
]

# CSRF trusted origins (explicitly define trusted domains)
CSRF_TRUSTED_ORIGINS = [
    "https://132.207.45.244",  # Your server's IP
]

CORS_ALLOW_CREDENTIALS = True

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.UserAccount'
